@model Nonlinear.Models.HomeModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section class="side-filter">
@using (Html.BeginForm()) {
    <div class="row">
        <div class="col-lg-12">
            @Html.LabelFor(x => x.States)
            @Html.DropDownListFor(x => x.StateId, Model.States, "-- Select State --", new { @class = "form-control" } ) 
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-lg-12">
            @Html.LabelFor(x => x.Cities)
            @Html.DropDownListFor(x => x.CityId, Model.Cities, "-- Select City --", new { @class = "form-control" } ) 
        </div>
    </div>
}
</section>


<div id="map"></div>
<script>
    $(document).ready(function () {
        loadCities();
    });

    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 12,
            mapTypeControl: true,
            mapTypeControlOptions: {
                style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
                mapTypeIds: [
                  google.maps.MapTypeId.ROADMAP,
                  google.maps.MapTypeId.TERRAIN
                ]
            },
            zoomControl: true,
            zoomControlOptions: {
                style: google.maps.ZoomControlStyle.SMALL
            }
        });

        var geocoder = new google.maps.Geocoder();

        // Adds the listener on the city dropdownlist for when the user change it, the map gets zoomed at the city in question.
        document.getElementById('CityId').addEventListener('change', function () {
            geocodeAddress(geocoder, map);
        });

        // Attempts to set initial location to the current user location
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                map.setCenter(initialLocation);
            });
        }
    }

    function geocodeAddress(geocoder, resultsMap) {
        // Gets the selected state and city name and concatenate to geocode the address. 
        // Used "Brasil" in the end just to be sure that it doesn't get redirected to some other location with the same name outside the country.
        var city = document.getElementById('CityId').options[document.getElementById('CityId').selectedIndex].text;
        var state = document.getElementById('StateId').options[document.getElementById('StateId').selectedIndex].text;
        var address = city + ', ' + state + ', Brasil';

        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                resultsMap.setCenter(results[0].geometry.location);
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }

    function loadCities() {
        var url = '@Url.Action("LoadCities", "Home")';

        // Adds the listener on the state dropdownlist for when the user change it, the cities are loaded according with the selected state.
        document.getElementById('StateId').addEventListener('change', function () {
            $.getJSON(url, { id: $(this).val() }, function (response) {
                var html = '<option>-- Select City --</option>';
                $.each(response, function (index, item) {
                    html += '<option value="' + item.Id + '">' + item.Nome + '</option>'
                });
                $("#CityId").html(html);
            });
        });


    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?signed_in=true&callback=initMap" async defer></script>
